Year = c(2010, 2011, 2012, 2010, 2011, 2012, 2010, 2011, 2012),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009")
)
View(data)
distancias_df <- data.frame(
Regiones = c("Región A", "Región B", "Región C"),
"Región A" = c(0, 100, 200),
"Región B" = c(100, 0, 150),
"Región C" = c(200, 150, 0)
)
View(distancias_df)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B", "Región B", "Región C", "Región C"),
Región_destino = c("Región A", "Región B", "Región A", "Región C", "Región A", "Región B"),
Distancia = c(0, 100, 100, 150, 200, 150)
)
View(distancias)
distancias <- data.frame(
Regiones = c("Región A", "Región B", "Región B", "Región C", "Región C"),
Región_destino = c("Región B", "Región A", "Región C", "Región A", "Región B"),
Distancia = c(0, 100, 100, 150, 200, 150)
)
View(distancias)
distancias <- data.frame(
Regiones = c("Región A", "Región B", "Región B", "Región C", "Región C"),
Región_destino = c("Región B", "Región A", "Región C", "Región A", "Región B"),
Distancia = c(100, 100, 150, 200, 150)
)
View(distancias)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 100, 150)
)
View(distancias)
data <- data.frame(
Year = c(2010, 2011, 2012, 2010, 2011, 2012, 2010, 2011, 2012),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009")
)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
View(distancias)
View(distancias_df)
# Crear la base de datos de ejemplo
data <- data.frame(
Year = c(2010, 2011, 2012, 2010, 2011, 2012, 2010, 2011, 2012),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009")
)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
View(data)
View(distancias)
total_exports <- aggregate(expo ~ ID + Year, data_expo, sum)
# Crear la base de datos de ejemplo
data_expo <- data.frame(
Year = c(2010, 2011, 2012, 2010, 2011, 2012, 2010, 2011, 2012),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009")
)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
total_exports <- aggregate(expo ~ ID + Year, data_expo, sum)
View(total_exports)
View(data_expo)
data_merged <- merge(data_expo, distancias, by.x = "regioneslabel", by.y = "Regiones", all.x = TRUE)
View(data_merged)
# Crear la base de datos de ejemplo
data_expo <- data.frame(
Year = c(2010, 2011, 2012, 2010, 2011, 2012, 2010, 2011, 2012),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009")
)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
View(data_expo)
View(distancias)
(150/350)*(1/100) + (200/350)*(1/120)
# Definimos los valores conocidos
exportaciones_a_region_a <- data_expo[data_expo$regioneslabel == "Región A", ]
View(exportaciones_a_region_a)
exportaciones_totales_i_t <- sum(exportaciones_a_region_a$expo)
View(exportaciones_a_region_a)
View(exportaciones_a_region_a)
# Calculamos w_{i, Región A, t}
omega_i_region_a_t <- sum((exportaciones_a_region_a$expo / exportaciones_totales_i_t) * (1 / distancias$Distancia[distancias$Región_destino != "Región A"]))
# Definimos los valores conocidos
empresa_i <- 1  # Cambia esto al ID de la empresa específica que estás calculando
ano_t <- 2010  # Cambia esto al año específico que estás calculando
exportaciones_a_region_a_i_t <- data_expo[data_expo$ID == empresa_i & data_expo$Year == ano_t & data_expo$regioneslabel == "Región A", ]$expo
View(exportaciones_a_region_a)
# Calculamos w_{i, Región A, t}
omega_i_region_a_t <- sum((exportaciones_a_region_a_i_t / exportaciones_totales_i_t) * (1 / distancias$Distancia[distancias$Región_destino != "Región A"]))
# Crear la base de datos de ejemplo
data_expo <- data.frame(
Year = c(2010, 2011, 2012, 2010, 2011, 2012, 2010, 2011, 2012),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009")
)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
View(data_expo)
# Crear la base de datos de ejemplo
data_expo <- data.frame(
Year = c(2010, 2011, 2012, 2010, 2011, 2012, 2010, 2011, 2012),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009"),
region_a = c(),
region_b = c(),
region_c = c()
)
View(distancias)
# Crear la base de datos de ejemplo
data_expo <- data.frame(
Year = c(2010, 2011, 2012, 2010, 2011, 2012, 2010, 2011, 2012),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009"),
region_a = c(0, 100, 120, 0, 100, 120, 0, 100, 120),
region_b = c(100, 0, 150, 100, 0, 150, 100, 0, 150),
region_c = c(120, 150, 0, 120, 150, 0, 120, 150, 0)
)
View(data_expo)
# Crear una nueva variable 'total_expo_firma_anio' que almacene el total de exportaciones por firma y año
data_expo$total_expo_firma_anio <- aggregate(expo ~ ID + Year, data=data_expo, sum)$expo
# Crear la base de datos de ejemplo
data_expo <- data.frame(
Year = c(2010, 2010, 2011, 2010, 2010, 2011, 2010, 2010, 2011),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009"),
region_a = c(0, 100, 120, 0, 100, 120, 0, 100, 120),
region_b = c(100, 0, 150, 100, 0, 150, 100, 0, 150),
region_c = c(120, 150, 0, 120, 150, 0, 120, 150, 0)
)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
# Crear una nueva variable 'total_expo_firma_anio' que almacene el total de exportaciones por firma y año
data_expo$total_expo_firma_anio <- aggregate(expo ~ ID + Year, data=data_expo, sum)$expo
View(data_expo)
View(data_expo)
# Crear una nueva variable 'total_expo_firma_anio' que almacene el total de exportaciones por firma y año
data_expo <- data_expo %>%
group_by(ID, Year) %>%
mutate(total_expo_firma_anio = sum(expo))
library(dplyr)
# Crear la base de datos de ejemplo
data_expo <- data.frame(
Year = c(2010, 2010, 2011, 2010, 2010, 2011, 2010, 2010, 2011),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009"),
region_a = c(0, 100, 120, 0, 100, 120, 0, 100, 120),
region_b = c(100, 0, 150, 100, 0, 150, 100, 0, 150),
region_c = c(120, 150, 0, 120, 150, 0, 120, 150, 0)
)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
# Crear una nueva variable 'total_expo_firma_anio' que almacene el total de exportaciones por firma y año
data_expo <- data_expo %>%
group_by(ID, Year) %>%
mutate(total_expo_firma_anio = sum(expo))
View(data_expo)
# Crear la base de datos de ejemplo
data_expo <- data.frame(
Year = c(2010, 2010, 2011, 2010, 2010, 2011, 2010, 2010, 2011),
ID = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
regioneslabel = c("Región A", "Región B", "Región C", "Región A", "Región B", "Región C", "Región A", "Región B", "Región C"),
expo = c(100, 150, 200, 120, 80, 210, 95, 130, 180),
HS6v = c("HS6001", "HS6002", "HS6003", "HS6004", "HS6005", "HS6006", "HS6007", "HS6008", "HS6009"),
region_a = c(0, 100, 120, 0, 100, 120, 0, 100, 120),
region_b = c(100, 0, 150, 100, 0, 150, 100, 0, 150),
region_c = c(120, 150, 0, 120, 150, 0, 120, 150, 0)
)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
# Crear una nueva variable 'total_expo_firma_anio' que almacene el total de exportaciones por firma y año
data_expo <- data_expo %>%
group_by(ID, Year) %>%
mutate(expo_i_t = sum(expo))
dist_matriz <- data.frame(
regiones = c("Region A", "Region B", "Region C")
region_a = c(0, 100, 120),
dist_matriz <- data.frame(
regiones = c("Region A", "Region B", "Region C"),
region_a = c(0, 100, 120),
region_b = c(100, 0, 150),
region_c = c(120, 150, 0)
)
View(dist_matriz)
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
dist_matriz <- distancias %>%
pivot_wider(names_from = Región_destino, values_from = Distancia, values_fill = 0) %>%
column_to_rownames(var = "Regiones") %>%
as.data.frame()
# Cargar el paquete tidyverse si aún no está cargado
if (!require(tidyverse)) {
install.packages("tidyverse")
library(tidyverse)
}
# Tu base de datos original
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
# Crear la matriz de distancias
dist_matriz <- distancias %>%
pivot_wider(names_from = Región_destino, values_from = Distancia, values_fill = 0) %>%
as.data.frame()
# Cambiar los nombres de las filas y columnas para que coincidan con tu resultado deseado
rownames_to_column(dist_matriz, var = "regiones") %>%
rename_with(~gsub("Región ", "Region ", .), -regiones) %>%
column_to_rownames(var = "regiones")
# Imprimir la matriz resultante
print(dist_matriz)
View(distancias)
View(dist_matriz)
View(distancias)
dist_matriz <- data.frame(
regiones = c("Region A", "Region B", "Region C"),
region_a = c(0, 100, 120),
region_b = c(100, 0, 150),
region_c = c(120, 150, 0)
)
View(distancias)
View(dist_matriz)
dist_matrizz <- data.frame(
regiones = c("Region A", "Region B", "Region C"),
region_a = c(0, 100, 120),
region_b = c(100, 0, 150),
region_c = c(120, 150, 0)
)
# Crear la matriz de distancias
dist_matriz <- distancias %>%
pivot_wider(names_from = Región_destino, values_from = Distancia, values_fill = 0) %>%
as.data.frame()
# Cambiar los nombres de las filas y columnas para que coincidan con tu resultado deseado
rownames_to_column(dist_matriz, var = "regiones") %>%
rename_with(~gsub("Región ", "Region ", .), -regiones) %>%
column_to_rownames(var = "regiones")
# Imprimir la matriz resultante
print(dist_matriz)
View(distancias)
library(tidyr)
transformar_a_matriz <- function(distancias) {
# Pivotar la base de datos a formato ancho
dist_wide <- pivot_wider(distancias,
names_from = Región_destino,
values_from = Distancia,
values_fill = 0)
# Obtener los nombres de las regiones
regiones <- unique(c(distancias$Regiones, distancias$Región_destino))
# Crear la matriz final
dist_matriz <- data.frame(regiones = regiones)
for (region in regiones) {
dist_matriz[[region]] <- dist_wide[[region]]
}
return(dist_matriz)
}
library(tidyr)
transformar_a_matriz <- function(distancias) {
# Pivotar la base de datos a formato ancho
dist_wide <- pivot_wider(distancias,
names_from = Región_destino,
values_from = Distancia,
values_fill = 0)
# Obtener los nombres de las regiones
regiones <- unique(c(distancias$Regiones, distancias$Región_destino))
# Crear la matriz final
dist_matriz <- data.frame(regiones = regiones)
for (region in regiones) {
dist_matriz[[region]] <- dist_wide[[region]]
}
return(dist_matriz)
}
# Ejemplo de uso
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
View(distancias)
# Crear una nueva variable 'total_expo_firma_anio' que almacene el total de exportaciones por firma y año
data_expo <- data_expo %>%
group_by(ID, Year) %>%
mutate(expo_i_t = sum(expo))
dist_matriz <- transformar_a_matriz(distancias)
library(tidyr)
transformar_a_matriz <- function(distancias) {
# Pivotar la base de datos a formato ancho
dist_wide <- pivot_wider(distancias,
names_from = Región_destino,
values_from = Distancia,
values_fill = 0)
# Obtener los nombres de las regiones
regiones <- unique(c(distancias$Regiones, distancias$Región_destino))
# Crear la matriz final
dist_matriz <- data.frame(regiones = regiones)
for (region in regiones) {
dist_matriz[[region]] <- dist_wide[[region]]
}
return(dist_matriz)
}
# Ejemplo de uso
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
dist_matriz <- transformar_a_matriz(distancias)
dist_matriz <- transformar_a_matriz(distancias)
library(tidyr)
library(tidyr)
transformar_a_matriz <- function(distancias) {
# Pivotar la base de datos a formato ancho
dist_wide <- pivot_wider(distancias,
names_from = Región_destino,
values_from = Distancia,
values_fill = 0)
# Obtener los nombres de las regiones
regiones <- unique(c(distancias$Regiones, distancias$Región_destino))
# Crear la matriz final
dist_matriz <- data.frame(regiones = regiones)
for (region_origen in regiones) {
# Obtener las distancias desde la región de origen
distancias_region <- dist_wide[[region_origen]]
# Renombrar la columna con el nombre de la región de origen
colnames(distancias_region) <- region_origen
# Agregar la columna al dataframe de la matriz
dist_matriz <- cbind(dist_matriz, distancias_region)
}
rownames(dist_matriz) <- NULL  # Reiniciar los nombres de fila
return(dist_matriz)
}
# Ejemplo de uso
distancias <- data.frame(
Regiones = c("Región A", "Región A", "Región B"),
Región_destino = c("Región B", "Región C", "Región C"),
Distancia = c(100, 120, 150)
)
dist_matriz <- transformar_a_matriz(distancias)
sumar_columnas_reg <- function(dataframe) {
# Filtrar las columnas que comienzan con "reg_"
columnas_reg <- grep("^reg_", colnames(dataframe), value = TRUE)
# Sumar las columnas seleccionadas
suma <- rowSums(dataframe[columnas_reg])
# Crear una nueva variable llamada "suma_reg" con el resultado de la suma
dataframe$suma_reg <- suma
# Devolver el dataframe con la nueva columna
return(dataframe)
}
# Crear un dataframe de ejemplo
df <- data.frame(
reg_1 = c(1, 2, 3),
reg_2 = c(4, 5, 6),
otra_col = c(7, 8, 9)
)
# Llamar a la función para sumar las columnas que comienzan con "reg_"
df_con_suma <- sumar_columnas_reg(df)
View(df_con_suma)
View(df)
# Crear un ejemplo de dataframe
data <- data.frame(
reg_1 = c(10, 20, 30),
reg_2 = c(5, 0, 15),
sum_reg = c(5, 0, 10)
)
View(data)
# Crear un ejemplo de dataframe
data <- data.frame(
reg_1 = c(10, 0, 30),
reg_2 = c(5, 0, 15),
sum_reg = c(15, 0, 45)
)
View(data)
# Crear un ejemplo de dataframe
data <- data.frame(
id = 1:3,
reg_1 = c(10, 0, 30),
reg_2 = c(5, 0, 15),
sum_reg = c(15, 0, 45),
other_col = c(100, 200, 300)
)
# Seleccionar las columnas que comienzan con "reg_"
reg_columns <- grep("^reg_", names(data), value = TRUE)
# Dividir las columnas "reg_" por "sum_reg" evitando NA cuando "sum_reg" es 0
data[reg_columns] <- lapply(data[reg_columns], function(x) ifelse(data$sum_reg == 0, 0, x / data$sum_reg))
View(data)
library(wooldridge)
data <- wage1
View(data)
model <- lm(wage ~ educ + exp + nonwhite + female)
model <- lm(wage ~ educ + exp + nonwhite + female, data = data)
model <- lm(wage ~ educ + exp + female, data = data)
model <- lm(wage ~ educ, data = data)
model
colnames(data)
model <- lm(wage ~ educ + exper, data = data)
model
model <- lm(wage ~ educ + exper + female, data = data)
model
model <- lm(wage ~ educ + exper + female + nonwhite, data = data)
model
install.packages(c("arrow", "askpass", "blob", "brew", "broom", "bslib", "cachem", "classInt", "cli", "collapse", "colorspace", "cpp11", "curl", "cyclocomp", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "Formula", "fs", "gargle", "gdtools", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httpuv", "httr", "jsonlite", "knitr", "labeling", "languageserver", "later", "lifecycle", "lintr", "lubridate", "miscTools", "modelr", "openssl", "pillar", "pkgload", "plm", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "purrr", "qdapRegex", "R.utils", "rbibutils", "Rcpp", "Rdpack", "readr", "readxl", "rematch", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "s2", "sandwich", "sass", "scales", "sf", "shiny", "sp", "stringdist", "stringi", "stringr", "styler", "sys", "systemfonts", "syuzhet", "tibble", "tidyr", "tidyverse", "tinytex", "tzdb", "units", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "withr", "wk", "xfun", "xml2", "yaml", "zoo"))
library("installr")
update()
updateR()
# load libraries
library(dplyr)
library(readxl)
# set working dictory depending on the user
user <- "CP"
if (user == "CP") {
setwd("C:/Users/crist/OneDrive/Documentos/GitHub/Performance-Chilean-Pension-Funds")
} else if (user == "JL") {
setwd("C:/Users/JL/Documents/Proyectos/2019/2019-05-01 - Retorno Fondos Brutos")
} else if (user == "AP") {
setwd("C:/Users/JG/Documents/Proyectos/2019/2019-05-01 - Retorno Fondos Brutos")
}
# load data
df_retornos_fondos_brutos <- read_excel("2-raw/retorno-mensuales-fondos-brutos.xlsx")
df_retornos_indices <- read_excel("2-raw/retorno-mensual-indices.xlsx")
# create df with returns
df_retornos <- left_join(df_retornos_fondos_brutos, df_retornos_indices, by = "Fecha")
# modelo para el fondo A
modelo_fondo_a <- lm(fondo_a ~ RVN + RVE + RFN + RFE, data = df_retornos)
summary(modelo_fondo_a)
install.packages("lmtest")
install.packages("car")
library(car)
modelo_fondo_a <- lm(fondo_a ~ RVN + RVE + RFN + RFE, data = df_retornos)
stargazer(modelo_fondo_a, type = "text", se = list(NeweyWest(modelo_fondo_a)))
modelo_fondo_a <- lm(fondo_a ~ RVN + RVE + RFN + RFE, data = df_retornos)
stargazer(modelo_fondo_a, type = "text", se = list(NeweyWest(modelo_fondo_a)))
library(stargazer)
# modelo para el fondo A
modelo_fondo_a <- lm(fondo_a ~ RVN + RVE + RFN + RFE, data = df_retornos)
stargazer(modelo_fondo_a, type = "text", se = list(NeweyWest(modelo_fondo_a)))
library(lmtest)
library(sandwich)
# modelo para el fondo A
modelo_fondo_a <- lm(fondo_a ~ RVN + RVE + RFN + RFE, data = df_retornos)
stargazer(modelo_fondo_a, type = "text", se = list(NeweyWest(modelo_fondo_a)))
stargazer(modelo_fondo_a, type = "text")
hete_modelo_fondo_a <- bptest(modelo_fondo_a, ~ RVN + RVE + RFN + RFE, data = df_retornos)
View(hete_modelo_fondo_a)
hete_modelo_fondo_a
# test to check autocorrelation
dwtest(modelo_fondo_a)
# test to check autocorrelation
bgtest(modelo_fondo_a, order = k)
# test to check autocorrelation
bgtest(modelo_fondo_a, order = 4)
# test to check autocorrelation
bgtest(modelo_fondo_a, order = 5)
# test to check autocorrelation
bgtest(modelo_fondo_a, order = 9)
install.packages("AICcmodavg")
# model estimation
modelo_fondo_b <- lm(fondo_b ~ RVN + RVE + RFN + RFE, data = df_retornos)
# test to check heteroscedasticity
hete_modelo_fondo_b <- bptest(modelo_fondo_b, ~ RVN + RVE + RFN + RFE, data = df_retornos)
# test to check autocorrelation
bgtest(modelo_fondo_b, order = 9)
